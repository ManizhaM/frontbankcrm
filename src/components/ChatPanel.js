import React, { useState, useRef, useEffect } from 'react';

function ChatPanel({ selectedChat, messages, onSendMessage, currentUser, loading }) {
  const [messageText, setMessageText] = useState('');
  const messagesEndRef = useRef(null);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const formatTime = (timestamp) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = () => {
    if (messageText.trim()) {
      onSendMessage(messageText);
      setMessageText('');
    }
  };
  
  // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (!selectedChat) {
    return (
      <div className="empty-chat">
        <div className="empty-chat-icon">üí¨</div>
        <div className="empty-chat-text">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</div>
      </div>
    );
  }
  
  return (
    <div className="chat-panel">
      <div className="chat-header">
        <div className="chat-info">
          <h2>{selectedChat.name}</h2>
          {selectedChat.phoneNumber && (
            <div className="chat-phone">üì± {selectedChat.phoneNumber}</div>
          )}
        </div>
        <div className="chat-actions">
          <button className="action-button info-button" title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ">
            ‚ÑπÔ∏è
          </button>
        </div>
      </div>
      
      <div className="messages-container">
        {loading ? (
          <div className="loading-messages">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>
        ) : messages.length === 0 ? (
          <div className="no-messages">–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
        ) : (
          <>
            {messages.map((message, index) => {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
              // type: 0 - –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–º—ã), type: 1 - –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              const isFromOperator = message.type === 0;
              
              return (
                <div
                  key={message.id || index}
                  className={`message ${isFromOperator ? 'message-outgoing' : 'message-incoming'}`}
                >
                  <div className="message-content">
                    <div className="message-header">
                      <span className="message-author">
                        {isFromOperator ? currentUser.username : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                      </span>
                      <span className="message-time">{formatTime(message.timestamp)}</span>
                    </div>
                    <div className="message-text">{message.text}</div>
                  </div>
                </div>
              );
            })}
            <div ref={messagesEndRef} />
          </>
        )}
      </div>
      
      <div className="message-input-container">
        <div className="message-input">
          <input
            type="text"
            value={messageText}
            onChange={(e) => setMessageText(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
          />
          <button 
            className="send-button"
            onClick={handleSendMessage}
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
}

export default ChatPanel;